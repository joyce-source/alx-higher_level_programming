def matrix_divided(matrix, div):
    """
    Returns a new matrix where all elements of the input matrix are divided by a scalar 'div'.

    >>> matrix_divided([[1, 2], [3, 4]], 2)
    [[0.5, 1.0], [1.5, 2.0]]

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    >>> matrix_divided([[0, 0], [0, 0], [0, 0]], 5)
    [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]

    >>> matrix_divided([[1, 2], [3, 4]], 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

    >>> matrix_divided([[1, 2], [3, '4']], 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, 2], [3, 4, 5]], 2)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

    >>> matrix_divided([[1, 2], [3, 4]], '2')
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

    """
    # Check if matrix is a list of lists of integers/floats
    if not all(isinstance(row, list) and all(isinstance(elem, (int, float)) for elem in row) for row in matrix):
        raise TypeError("matrix must be a matrix (list of lists) of integers/floats")
    # Check if all rows have the same size
    if not all(len(row) == len(matrix[0]) for row in matrix):
        raise TypeError("Each row of the matrix must have the same size")
    # Check if div is a number
    if not isinstance(div, (int, float)):
        raise TypeError("div must be a number")
    # Check if div is not zero
    if div == 0:
        raise ZeroDivisionError("division by zero")
    # Divide all elements of the matrix by div, rounded to 2 decimal places
    new_matrix = [[round(elem/div, 2) for elem in row] for row in matrix]
    return new_matrix

# Run the doctests
if __name__ == '__main__':
    import doctest
    doctest.testmod()

